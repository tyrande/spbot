float points[] = {604.72,698.75,603.99,692.67,601.05,687.96,596.33,685.10,590.26,684.58,583.29,685.32,576.43,685.82,569.70,686.08,563.09,686.12,556.63,685.92,550.31,685.50,544.15,684.86,538.16,684.01,532.34,682.94,526.71,681.66,521.28,680.17,516.06,678.47,511.05,676.57,506.28,674.47,501.75,672.17,497.48,669.67,493.47,666.98,489.74,664.10,486.29,661.02,483.15,657.75,480.31,654.29,477.80,650.65,475.62,646.81,473.77,642.80,472.28,638.59,471.15,634.20,470.38,629.62,469.98,624.87,469.96,619.92,470.32,614.79,471.08,609.48,472.22,603.98,473.76,598.30,475.69,592.43,478.03,586.38,480.75,580.14,483.84,573.78,487.25,567.37,490.96,560.92,494.95,554.44,499.21,547.91,503.71,541.36,508.44,534.79,513.39,528.20,518.54,521.61,523.88,515.01,529.38,508.42,535.04,501.84,540.83,495.29,546.76,488.77,552.80,482.29,558.94,475.86,565.17,469.50,571.48,463.21,577.85,457.00,584.28,450.90,590.76,444.90,597.28,439.03,603.82,433.29,610.38,427.71,616.94,422.30,623.51,417.07,630.07,412.04,636.62,407.23,643.15,402.65,649.65,398.33,656.11,394.28,662.53,390.52,668.90,387.07,675.22,383.95,681.49,381.18,687.69,378.78,693.76,376.79,699.63,375.22,705.31,374.09,710.79,373.39,716.07,373.10,721.16,373.24,726.05,373.78,730.75,374.72,735.25,376.05,739.55,377.77,743.66,379.85,747.57,382.29,751.29,385.07,754.81,388.18,758.12,391.60,761.24,395.33,764.16,399.35,766.88,403.63,769.39,408.18,771.70,412.96,773.80,417.98,775.69,423.21,777.37,428.65,778.84,434.27,780.10,440.06,781.13,446.03,781.95,452.14,782.54,458.39,782.91,464.77,783.05,471.27,782.96,477.88,782.63,484.59,782.06,491.39,781.25,498.28,780.20,505.24,778.89,512.27,778.88,518.55,781.27,523.78,785.63,527.47,791.53,529.11,797.88,528.31,803.50,525.32,807.81,520.59,810.24,514.53,811.50,507.62,812.57,500.75,813.44,493.92,814.13,487.14,814.63,480.42,814.94,473.75,815.07,467.14,815.02,460.61,814.79,454.15,814.38,447.77,813.80,441.48,813.05,435.29,812.12,429.20,811.03,423.23,809.77,417.38,808.34,411.66,806.74,406.09,804.99,400.66,803.07,395.39,800.99,390.30,798.74,385.39,796.34,380.67,793.78,376.16,791.06,371.87,788.19,367.80,785.16,363.98,781.97,360.41,778.62,357.10,775.12,354.08,771.47,351.34,767.65,348.90,763.69,346.78,759.56,344.97,755.29,343.50,750.85,342.37,746.26,341.58,741.51,341.16,736.61,341.09,731.55,341.39,726.33,342.07,720.95,343.12,715.41,344.55,709.71,346.35,703.86,348.53,697.89,351.06,691.86,353.92,685.78,357.07,679.65,360.51,673.47,364.23,667.25,368.20,660.99,372.41,654.68,376.85,648.35,381.49,641.98,386.34,635.59,391.36,629.17,396.55,622.74,401.90,616.30,407.39,609.84,413.00,603.39,418.74,596.94,424.59,590.50,430.53,584.07,436.57,577.67,442.68,571.29,448.86,564.94,455.10,558.64,461.39,552.39,467.73,546.19,474.11,540.05,480.52,533.99,486.95,528.01,493.40,522.12,499.86,516.33,506.33,510.65,512.80,505.08,519.27,499.65,525.73,494.36,532.17,489.21,538.60,484.24,545.00,479.43,551.38,474.82,557.73,470.41,564.05,466.21,570.33,462.23,576.57,458.50,582.77,455.02,588.93,451.82,595.04,448.91,601.05,446.35,606.90,444.12,612.61,442.24,618.16,440.69,623.56,439.49,628.81,438.62,633.91,438.08,638.86,437.89,643.67,438.02,648.32,438.48,652.84,439.26,657.20,440.35,661.42,441.76,665.49,443.47,669.41,445.48,673.19,447.77,676.82,450.35,680.30,453.20,683.64,456.32,686.82,459.69,689.86,463.31,692.76,467.17,695.50,471.26,698.09,475.56,700.53,480.08,702.82,484.79,704.95,489.70,706.93,494.80,708.76,500.06,710.42,505.49,711.93,511.08,713.28,516.82,714.47,522.70,715.50,528.71,716.36,534.85,717.05,541.11,717.58,547.48,717.93,553.96,718.11,560.53,718.12,567.20,717.95,573.96,717.60,580.80,717.07,587.72,716.35,594.39,714.20,599.87,709.82,603.19,704.67,604.72,698.75};

int step1 =40;
int dir1 = 41;
int step2 =50;
int dir2 = 51;

float dis1 = 600;
float dis2 = 600;

float minStep = 0.5;

// dir true mean's left increase dis
void step(boolean dir,int steps){
  digitalWrite(dir1,dir);digitalWrite(dir2,!dir);
  delay(10);
  for(int i=0;i<steps;i++){
    digitalWrite(step1, LOW);digitalWrite(step2, LOW);
    delayMicroseconds(800);
    digitalWrite(step1, HIGH);digitalWrite(step2, HIGH);
    delayMicroseconds(1200);
  }
}

void setDis(float d1, float d2)
{
  delay(10);
  digitalWrite(dir1,d1 > dis1);
  digitalWrite(dir2,d2 < dis2);
  
  float delta1 = abs(d1-dis1);
  float delta2 = abs(d2-dis2);

  while(delta1 > minStep || delta2 > minStep){
    if (delta1 > minStep) digitalWrite(step1, LOW);
    if (delta2 > minStep) digitalWrite(step2, LOW);
    delayMicroseconds(800);
    if (delta1 > minStep) digitalWrite(step1, HIGH);
    if (delta2 > minStep) digitalWrite(step2, HIGH);
    delayMicroseconds(1200);
    
    if (delta1 > minStep) delta1 -= minStep;
    if (delta2 > minStep) delta2 -= minStep;
  }
  
  dis1 = d1;
  dis2 = d2;
}

void setDis2(float d1, float d2)
{
  digitalWrite(dir1,d1 > dis1);
  digitalWrite(dir2,d2 < dis2);
  
  float delta1 = abs(d1-dis1);
  float delta2 = abs(d2-dis2);
  
  while(delta1 > minStep || delta2 > minStep){
    if (delta1 > minStep) digitalWrite(step1, LOW);
    if (delta2 > minStep) digitalWrite(step2, LOW);
    delayMicroseconds(800);
    if (delta1 > minStep) digitalWrite(step1, HIGH);
    if (delta2 > minStep) digitalWrite(step2, HIGH);
    delayMicroseconds(1200);
    
    if (delta1 > minStep) delta1 -= minStep;
    if (delta2 > minStep) delta2 -= minStep;
  }
  
  dis1 = d1;
  dis2 = d2;
}

void loop(){}

void setup() {
    pinMode(13, OUTPUT);
    digitalWrite(13, LOW);
    
    pinMode(step1, OUTPUT);pinMode(step2, OUTPUT);
    pinMode(dir1, OUTPUT);pinMode(dir2, OUTPUT);
    digitalWrite(step1, HIGH);digitalWrite(step2, HIGH);
    digitalWrite(dir1, HIGH);digitalWrite(dir2, HIGH);
    
    for (int i=0;i<257;i++){
      digitalWrite(13, HIGH);
      setDis(points[i*2],points[i*2+1]);
      digitalWrite(13, LOW);
    }
    
    delay(100);
    setDis(600,600);
}
