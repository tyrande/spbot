float points[] = {677.44,762.55,676.03,756.32,672.52,751.21,667.40,747.78,661.15,746.58,654.12,746.54,647.17,746.26,640.31,745.76,633.54,745.02,626.87,744.06,620.31,742.87,613.87,741.47,607.56,739.85,601.38,738.02,595.35,735.98,589.47,733.74,583.77,731.30,578.24,728.65,572.90,725.81,567.76,722.77,562.83,719.55,558.12,716.13,553.64,712.53,549.42,708.75,545.45,704.78,541.75,700.63,538.32,696.31,535.20,691.80,532.37,687.13,529.86,682.28,527.68,677.25,525.83,672.06,524.32,666.70,523.17,661.17,522.39,655.48,521.97,649.62,521.94,643.60,522.29,637.42,523.03,631.07,524.17,624.57,525.71,617.91,527.64,611.16,529.92,604.41,532.53,597.65,535.48,590.89,538.73,584.15,542.27,577.42,546.10,570.71,550.19,564.03,554.53,557.40,559.11,550.81,563.90,544.27,568.91,537.81,574.10,531.41,579.47,525.11,585.01,518.90,590.70,512.80,596.53,506.82,602.49,500.97,608.56,495.27,614.74,489.72,621.01,484.35,627.36,479.16,633.79,474.17,640.27,469.39,646.81,464.84,653.39,460.54,660.01,456.50,666.65,452.74,673.31,449.26,679.98,446.10,686.66,443.26,693.33,440.75,699.99,438.60,706.63,436.82,713.25,435.43,719.84,434.43,726.33,433.84,732.64,433.67,738.78,433.92,744.75,434.57,750.54,435.60,756.15,437.03,761.58,438.82,766.83,440.97,771.90,443.46,776.79,446.29,781.50,449.43,786.02,452.88,790.35,456.62,794.50,460.63,798.46,464.91,802.23,469.43,805.80,474.19,809.18,479.16,812.37,484.35,815.36,489.72,818.14,495.28,820.72,501.00,823.10,506.87,825.27,512.89,827.22,519.04,828.97,525.31,830.49,531.69,831.80,538.18,832.88,544.75,833.74,551.40,834.36,558.12,834.75,564.91,834.90,571.76,834.82,578.66,834.48,585.59,833.90,592.57,834.54,598.92,837.50,604.46,842.28,608.64,848.39,610.90,854.69,610.73,860.04,608.29,863.90,603.96,865.74,598.12,866.31,591.30,866.70,584.50,866.89,577.72,866.89,570.96,866.70,564.23,866.33,557.53,865.78,550.87,865.05,544.25,864.14,537.69,863.05,531.17,861.80,524.72,860.37,518.33,858.77,512.01,857.00,505.78,855.07,499.63,852.97,493.58,850.71,487.63,848.29,481.79,845.71,476.08,842.98,470.49,840.08,465.05,837.03,459.75,833.83,454.61,830.47,449.64,826.96,444.86,823.30,440.26,819.48,435.86,815.52,431.68,811.41,427.72,807.15,424.00,802.74,420.52,798.19,417.30,793.49,414.35,788.64,411.69,783.64,409.31,778.50,407.24,773.22,405.48,767.79,404.04,762.21,402.93,756.49,402.17,750.63,401.75,744.62,401.68,738.46,401.98,732.16,402.65,725.78,403.67,719.36,405.04,712.91,406.75,706.44,408.78,699.95,411.12,693.44,413.77,686.92,416.70,680.39,419.91,673.85,423.39,667.31,427.11,660.78,431.07,654.26,435.26,647.76,439.66,641.27,444.26,634.81,449.06,628.39,454.02,622.00,459.16,615.66,464.45,609.38,469.88,603.15,475.45,596.99,481.14,590.90,486.94,584.90,492.85,578.98,498.86,573.17,504.95,567.46,511.13,561.87,517.37,556.41,523.68,551.08,530.04,545.90,536.45,540.87,542.91,536.01,549.40,531.33,555.92,526.84,562.47,522.54,569.04,518.46,575.62,514.60,582.21,510.97,588.81,507.58,595.41,504.46,602.00,501.60,608.59,499.03,615.16,496.74,621.73,494.76,628.27,493.11,634.74,491.80,641.07,490.83,647.27,490.20,653.33,489.91,659.26,489.95,665.06,490.31,670.72,491.00,676.25,492.00,681.64,493.31,686.89,494.92,692.01,496.82,696.99,499.01,701.84,501.48,706.54,504.22,711.11,507.22,715.54,510.47,719.83,513.97,723.99,517.70,727.99,521.66,731.86,525.83,735.59,530.21,739.17,534.78,742.60,539.55,745.89,544.49,749.04,549.61,752.03,554.89,754.87,560.32,757.57,565.90,760.10,571.62,762.49,577.46,764.72,583.43,766.79,589.51,768.69,595.70,770.44,601.99,772.03,608.38,773.44,614.85,774.70,621.40,775.78,628.03,776.68,634.73,777.42,641.50,777.98,648.32,778.36,655.20,778.55,662.13,778.57,668.65,777.10,673.73,773.25,676.53,768.39,677.44,762.55};

int pin_step1 =40;
int pin_dir1 = 41;
int pin_step2 =50;
int pin_dir2 = 51;

float zero1 = 700;
float zero2 = 700;
int cur_pos1 = 0;
int cur_pos2 = 0;

float stepLen = 0.5;

int slotDelay = 200;  // micro second
int minSlotPerStep = 10;

void setDelta(int steps1, int steps2){
  int stepsMax = max(steps1, steps2);
  int slots = stepsMax * minSlotPerStep;

  float stepPerSlot1 = (float)steps1/(float)slots;
  float stepPerSlot2 = (float)steps2/(float)slots;

  float stepped1 = 0;
  float stepped2 = 0;

  int n = 0;
  for (int i=0;i<slots;i++){
    n = i+1;

    if (stepped1<ceil(n*stepPerSlot1)){
      stepped1 = ceil(n*stepPerSlot1);
      digitalWrite(pin_step1, LOW);
    }else{
      digitalWrite(pin_step1, HIGH);
    }

    if (stepped2<ceil(n*stepPerSlot2)){
      stepped2 = ceil(n*stepPerSlot2);
      digitalWrite(pin_step2, LOW);
    }else{
      digitalWrite(pin_step2, HIGH);
    }

    delayMicroseconds(slotDelay);
  }
}


void setDis(float d1, float d2)
{
  int pos1 = (d1-zero1) / stepLen;
  int pos2 = (d2-zero2) / stepLen;

  digitalWrite(pin_dir1, pos1 > cur_pos1);
  digitalWrite(pin_dir2, pos2 < cur_pos2);
  
  int steps1 = abs(pos1-cur_pos1);
  int steps2 = abs(pos2-cur_pos2);

  setDelta(steps1, steps2);

  cur_pos1 = pos1;
  cur_pos2 = pos2;
}

void loop(){}

void setup() {
  pinMode(13, OUTPUT);
  digitalWrite(13, LOW);
    
  pinMode(pin_step1, OUTPUT);pinMode(pin_step2, OUTPUT);
  pinMode(pin_dir1, OUTPUT);pinMode(pin_dir2, OUTPUT);
  digitalWrite(pin_step1, HIGH);digitalWrite(pin_step2, HIGH);
  digitalWrite(pin_dir1, HIGH);digitalWrite(pin_dir2, HIGH);
  
//  setDis(545.0, 631.0);

    for (int i=0;i<257;i++){
      digitalWrite(13, HIGH);
      setDis(points[i*2],points[i*2+1]);
      digitalWrite(13, LOW);
    }
    
    delay(100);
    setDis(700,700);
}
